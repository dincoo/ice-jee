<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">
	
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<bean id="realm" class="com.vz.finance.cloud.postloan.web.core.shiro.ReourceRealm" />
	
	
	
	<!-- session会话存储的实现类 -->
<!-- 	<bean id="redisSessionDAO" class="com.hulian.ff.cloud.common.core.support.cache.shiro.RedisSessionDAO" /> -->
	
	
	<!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
	<bean id="sharesession" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- cookie的name,对应的默认是 JSESSIONID -->
		<constructor-arg name="name" value="SHAREJSESSIONID" />
		<!-- jsessionId的path为 / 用于多个系统共享jsessionId -->
		<property name="path" value="/" />
		<property name="httpOnly" value="true" />
	</bean>	
	
	<bean id="defaultWebSessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="1200000" />
		<!-- 是否在会话过期后会调用SessionDAO的delete方法删除会话 默认true -->
		<property name="deleteInvalidSessions" value="true" />

		<!-- 会话验证器调度时间 -->
		<property name="sessionValidationInterval" value="1800000" />

		<!-- session存储的实现 -->
		<!-- <property name="sessionDAO" ref="redisSessionDAO" /> -->
		<!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
		<property name="sessionIdCookie" ref="sharesession" />
		<!-- 定时检查失效的session -->
		<property name="sessionValidationSchedulerEnabled" value="false" />
	
	</bean>
	
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="realm" />
		<!-- <property name="cacheManager">
    		<bean class="com.hulian.ff.cloud.common.core.support.cache.shiro.RedisCacheManager" />
		</property> -->
		<property name="sessionManager" ref="defaultWebSessionManager"></property>
	</bean>
	
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接 -->
		<property name="loginUrl" value="/unauthorized" />
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<property name="unauthorizedUrl" value="/forbidden" />
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做 -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
		<property name="filterChainDefinitions">
			<value>
				/**=anon
			</value>
		</property>
	</bean>
	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
</beans>